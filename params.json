{
  "name": "Goodman",
  "tagline": "Goodman Spectrometer tools for spectroscopy",
  "body": "# Goodman High Throughput Spectrograph\r\n**WARNING** This code is being developed and is not ready for\r\n scientific use. Always check the branch **other than master**.\r\n \r\n If you are interested in this software \r\n\r\nThe Goodman High Throughput Spectrograph is an imaging spectrograph\r\n if you wish to know more about the instrument please check the \r\n [SOAR website](http://www.ctio.noao.edu/soar/content/goodman-high-throughput-spectrograph)\r\n \r\nTo see full documentation please go to the GitHub hosted site for [Goodman](https://simontorres.github.io/goodman/)\r\n\r\n## What is contained in this package?\r\n\r\nThis repository contains tools for spectroscopy, but after the data is \r\nreduced, i.e. bias and flat corrected, for that part please use \r\n[David Sanmartim's](https://github.com/dsanmartim/goodman_ccdreduction) github repository.\r\n\r\n#### redspec.py  \r\n Spectra extraction and wavelength calibration\r\n\r\n## How to use it?\r\n\r\nPlace the files in your system's **$PATH** variable and then you can call it from anywhere in your system\r\n\r\n## Important Notes\r\n\r\nNeeds python2.7 and a newer version of numpy1.12.0 otherwise there will\r\nbe problems with numpy.linspace\r\n\r\n# Development Status\r\n\r\nThe pipeline is organized in three files (this might increase):\r\n\r\n## redspec.py\r\nThis module basically organizes the data and sort of makes a plan for processing the night.\r\n\r\n- [x] Read and Parse Arguments (uses argparse). Also checks for consistency.\r\n- [x] Define Night Class. Reads header information from and creates a class that contain important _night_ information.\r\n- [ ] Set mode to be used at the telescope (while observing). Is not defined yet if this is really necessary.\r\n- [ ] Organize Full Night. Edits the Night Class by adding SienceObject wich will be defined depending on one of the following modes.\r\n  * [x] Mode 0: One lamp for all targets in the night.\r\n  * [x] Mode 1: One or more lamps per science target.\r\n  * [ ] Mode 2: A text file defines what lamps will be used in what targets.\r\n  * [ ] Mode 3: No lamps, solution will be calculated from skylines.\r\n\r\nFor every ScienceObject the module Process is called wich will do the actual work.\r\n\r\n## process.py\r\nIn order to work this needs the source's path and a ScienceObject (class).\r\n\r\n- [x] Read target data and header.\r\n- [ ] For any of the modes that use comparison lamps:\r\n  1. [x] Read lamps data and header\r\n  2. [x] Identify single targets (one target in the slit)\r\n  3. [ ] Identify multiple targets (most of the work done but not tested recently)\r\n  4. [x] Trace spectrum.\r\n  5. [x] Extract data.\r\n    - [x] Normal Extraction\r\n    - [ ] Optimal extraction\r\n- [ ] Nothing done for the case when skylines will be used as wavelength calibrators.\r\n\r\nAfter the extraction of the spectrum it will be packed and then parsed to the next module.\r\n\r\n## wavelengthCalibration.py\r\n**TODO**: find a better name\r\n\r\n- [x] Interpret science pack (parsed from previous module)\r\n- [ ] Automatic Wavelength Calibration\r\n  - [x] Identify lines\r\n  - [x] Estimate wavelength solution from information in the header\r\n  - [ ] Find wavelength solution (can be tricky and will take some time)\r\n- [ ] Automatic Wavelength Calibration by template (can also be tricky since dispersion is not linear)\r\n- [ ] Find wavelength solution interactively.\r\n- [ ] Put wavelength solution in the header and write down files.\r\n\r\n\r\n# Documentation Status Estimate\r\nIn **Bold** are the classes and in _italics_ are their respective methods.\r\nThe values presented here are based only on my personal perception and satisfaction about the status of progress\r\nThe class percentage doesn't take in account the completeness of \r\n\r\n## redspec.py\r\n- **MainApp** 100%\r\n  - _  __init__ _ 0%\r\n  - _get_args_  100%\r\n  - _set_night_ 95%  - Could be improved\r\n  - _organize_full_night_ 30%\r\n  - _convert_time_ 100%\r\n  - _ra_dec_to_deg_ 100%\r\n  - _print_spacers_ 100% - Most likely will be removed\r\n  - _print_progress_ 0% - Most likely will be removed\r\n\r\n- **Night** 70%\r\n  - _  __init__ _ 0%\r\n  - _add_sci_ 100%\r\n  - _add_lamp_ 100%\r\n  - _add_sci_object_ 0%\r\n  - _is_telescope_ 0%\r\n  \r\n- **ScienceObject** 100%\r\n  - _  __init__ _ 0%\r\n  - _add_lamp_ 100%\r\n  - _print_all_ 100%\r\n \r\n\r\n## process.py\r\n- **Process** 100%\r\n  - _  __init__ _ 0%\r\n  - _identify_spectra_ 100%\r\n  - _trace_ 100%\r\n  - _mask_ 100%\r\n  - _extract_ 100%\r\n\r\n- **IdentifiedTarget** 50%\r\n  - _  __init__ _ 0%\r\n  \r\n  \r\n## wavelengthCalibration.py\r\n- **WavelengthCalibration** 0%\r\n  - _  __init__ _ 0%\r\n  - _interpolate_ 100%\r\n  - _recenter_line_ 100% - Most likely will be removed\r\n  - _get_line_limits_ 100%\r\n  - _get_line_centers_ 100%\r\n  - _get_spectral_characteristics_ 70%\r\n  - _predicted_wavelength_ 0%\r\n  - _wavelength_solution_ 1%\r\n  - _get_lines_in_range_ 0%\r\n  - _pixel_axis_cross_correlate_ 0%\r\n  - _add_wavelength_solution_ 0%\r\n  - _get_wavelength_solution_ 0%\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}